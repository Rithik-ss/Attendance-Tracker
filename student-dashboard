<!DOCTYPE html>
<html>
<head>
  <title>Student Dashboard</title>
  <style>
    body {
      font-family: Arial;
      background: #e6e6ff;
      margin: 0;
      padding: 0;
    }

    .navbar {
      background: #6200ea;
      color: white;
      padding: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
    }

    .profile {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .profile img {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
    }

    .greeting-section {
      display: flex;
      flex-direction: column;
      color: white;
    }

    .date-display {
      font-size: 14px;
    }

    .menu-icon {
      font-size: 24px;
      cursor: pointer;
    }

    .dropdown {
      position: absolute;
      top: 60px;
      right: 15px;
      background: white;
      color: #333;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      padding: 10px;
      display: none;
      flex-direction: column;
      z-index: 100;
    }

    .dropdown button {
      background: #6200ea;
      color: white;
      border: none;
      padding: 8px 12px;
      margin: 5px 0;
      cursor: pointer;
      border-radius: 4px;
      width: 100px;
      text-align: left;
    }

    .dropdown button.logout {
      background: red;
    }

    .content {
      padding: 20px;
    }

    .attendance-card {
      padding: 12px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      background-color: #f9f9f9;
    }

    .low-attendance {
      color: red;
    }

    .good-attendance {
      color: green;
    }
    .attendance-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.attendance-table th, .attendance-table td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: center;
  font-weight: bold;
}

.attendance-table th {
  background-color: #00bcd4;
  color: white;
}

.status-P { background-color: #4caf50; color: white; }  /* Present */
.status-A { background-color: #f44336; color: white; }  /* Absent */
.status-OD { background-color: #03a9f4; color: white; } /* OD */
.status-H { background-color: #9e9e9e; color: white; }  /* Holiday */
.status-L { background-color: #9c27b0; color: white; }  /* Leave */
.status-N { background-color: #ffeb3b; color: black; }  /* Not Entered */
.low-attendance {
  color: red;
  font-weight: bold;
}
.good-attendance {
  color: green;
  font-weight: bold;
}


  </style>
</head>
<body>
  <div class="navbar">
    <div class="profile">
      <img id="profilePhoto" src="" alt="Photo" />
      <div class="greeting-section">
        <span id="greeting">Hey, Student</span>
        <span id="currentDate" class="date-display"></span>
      </div>
    </div>
    <div class="menu-icon" onclick="toggleDropdown()">☰</div>
    <div class="dropdown" id="dropdownMenu">
      <button onclick="scrollToAttendance()">Attendance</button>
      <button class="logout" onclick="logout()">Logout</button>
    </div>
  </div>

  <div class="content">
    <h3>Your Attendance</h3>
    <div id="attendanceList">Loading attendance...</div>
    <div id="attendanceSummaryCounts"></div>
    <div id="monthlySummary"></div>
    <div id="monthlyOverallSummary"></div>
    <div id="monthlyHistorySummary"></div>
    <div id="monthly-summary" style="background:#f5eaff; padding:10px; margin-bottom:10px; border-radius:8px;"></div>
<div id="attendance-history" style="background:#fff0ff; padding:10px; border-radius:8px;"></div>

<div id="attendancePercent" style="font-weight: bold; margin-top: 10px;"></div>
<div id="monthlySummaryPercent" style="margin: 10px; font-weight: bold;"></div>
<div id="monthly-attendance"></div>
<div id="attendance-summary"></div>





  </div>
  


  <!-- Firebase -->
  <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore-compat.js"></script>
<script>
  const firebaseConfig = {
    apiKey: "AIzaSyBtkza2N7BI9ULP_sbWXt2GhhGxl5in0Zg",
    authDomain: "reat-3d59e.firebaseapp.com",
    projectId: "reat-3d59e",
    storageBucket: "reat-3d59e.appspot.com",
    messagingSenderId: "360948191569",
    appId: "1:360948191569:web:cdca6f567a6b5607e3c370"
  };
  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

  window.onload = () => {
    const name = localStorage.getItem("studentName");
    const roll = localStorage.getItem("studentRoll");
    const photo = localStorage.getItem("studentPhoto");

    if (!name || !roll) {
      alert("Login required. Redirecting...");
      location.href = "studentLogin.html";
      return;
    }

    document.getElementById("greeting").textContent = `Hey, ${name}`;
    if (photo) document.getElementById("profilePhoto").src = photo;

    const today = new Date();
    const dateStr = today.toLocaleDateString(undefined, {
      day: 'numeric', month: 'long', year: 'numeric'
    });
    document.getElementById("currentDate").textContent = dateStr;

    loadAttendance(roll);
  };
let dropdownInitialized = false;

function toggleDropdown() {
  const dropdown = document.getElementById("dropdownMenu");
  dropdown.style.display = dropdown.style.display === "flex" ? "none" : "flex";
}

// Attach listener *once*
if (!dropdownInitialized) {
  document.addEventListener("click", function(e) {
    const dropdown = document.getElementById("dropdownMenu");
    const menuIcon = document.querySelector(".menu-icon");
    // If the dropdown is open and clicked outside
    if (dropdown.style.display === "flex" && !dropdown.contains(e.target) && !menuIcon.contains(e.target)) {
      dropdown.style.display = "none";
    }
  });
  dropdownInitialized = true;
}


  function logout() {
    localStorage.clear();
    window.location.href = "studentLogin.html";
  }

  function scrollToAttendance() {
    document.getElementById("attendanceList").scrollIntoView({ behavior: "smooth" });
    document.getElementById("dropdownMenu").style.display = "none";
    loadGridAttendance(localStorage.getItem("studentRoll"));
  }
  function normalizeStatus(status) {
  if (!status) return "";
  return status.trim().toUpperCase();
}


  function getStatusLetter(status) {
    if (!status) return "";
    const normalized = status.trim().toUpperCase();
    if (["P", "PRESENT"].includes(normalized)) return "P";
    if (["A", "ABSENT"].includes(normalized)) return "A";
    if (["OD", "ON DUTY"].includes(normalized)) return "OD";
    if (["H", "HOLIDAY"].includes(normalized)) return "H";
    
    
    return normalized;
  }

  async function loadGridAttendance(roll) {
    const list = document.getElementById("attendanceList");
    list.innerHTML = "Loading attendance...";
    try {
      const snapshot = await db.collection("attendanceRecords").get();
      if (snapshot.empty) {
        list.innerHTML = "No attendance records found.";
        return;
      }

      const dateMap = {};
      snapshot.forEach(doc => {
        const data = doc.data();
        const rawDate = data.date || "Unknown Date";
        const dateStr = new Date(rawDate).toLocaleDateString("en-GB");
        const hour = data.hour || "Unknown Hour";
        const studentStatus = data.records?.[roll];
        const statusLetter = getStatusLetter(studentStatus);
        if (!studentStatus) return;
        if (!dateMap[dateStr]) dateMap[dateStr] = {};
        dateMap[dateStr][hour] = statusLetter;
      });

      const hours = ["1st Hour", "2nd Hour", "3rd Hour", "4th Hour", "5th Hour", "6th Hour", "7th Hour"];
     const sortedDates = Object.keys(dateMap)
  .filter(dateStr => {
    const [day, month, year] = dateStr.split("/").map(Number);
    return !(month === 7 && year === 2025); // Exclude July 2025
  })
  .sort((a, b) => {
    const da = new Date(a.split("/").reverse().join("-"));
    const db = new Date(b.split("/").reverse().join("-"));
    return db - da;
  });


      let html = `<table class="attendance-table"><thead><tr><th>Date</th>`;
      hours.forEach(h => html += `<th>${h}</th>`);
      html += `</tr></thead><tbody>`;

      sortedDates.forEach(date => {
        const [day, month, year] = date.split("/").map(Number);
const jsDate = new Date(year, month - 1, day);
const dayName = jsDate.toLocaleDateString("en-US", { weekday: "short" }); // e.g., Mon, Tue
html += `<tr><td>${date} <br/><small>(${dayName})</small></td>`;

        hours.forEach(hour => {
          const status = dateMap[date][hour] || "";
          const cellClass = status ? `status-${status}` : "";
          html += `<td class="${cellClass}">${status}</td>`;
        });
        html += `</tr>`;
      });

      html += `</tbody></table>`;
      list.innerHTML = html;
    } catch (err) {
      console.error("Error loading attendance:", err);
      list.textContent = "Failed to load attendance.";
    }
  }

  

    



  async function loadAttendance(roll) {
  const list = document.getElementById("attendanceList");
  const summaryCounts = document.getElementById("attendanceSummaryCounts");
  const monthlySummary = document.getElementById("monthlyOverallSummary");
  const monthContainer = document.getElementById("monthlyHistorySummary");

  let carriedForwardPercent = 100;
  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();
  const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;
  const prevYear = currentMonth === 0 ? currentYear - 1 : currentYear;
  const prevMonthKey = `${prevYear}-${String(prevMonth + 1).padStart(2, "0")}`;

  await db
    .collection("studentsAttendance")
    .doc(roll)
    .collection("monthlySummary")
    .doc(prevMonthKey)
    .get()
    .then(docSnap => {
      if (docSnap.exists) {
        carriedForwardPercent = docSnap.data().percent || 100;
      }
    });

  const snapshot = await db
    .collection("studentsAttendance")
    .doc(roll)
    .collection("records")
    .orderBy("date", "asc")
    .get();

  if (snapshot.empty) {
    list.innerHTML = "No attendance records found.";
    return;
  }

  const attendanceMap = {};
  const subjectPercentMap = {};
  const sortedDocs = snapshot.docs.map(doc => doc.data()).sort((a, b) => new Date(a.date) - new Date(b.date));

  sortedDocs.forEach(data => {
    const subject = data.subject || "Unknown";
    const subjectName = data.subjectName || "Subject";
    const status = (data.status || "").trim().toUpperCase();
    const dateStr = new Date(data.date).toISOString().split("T")[0];
    const key = `${subject}|${subjectName}|${data.hour || "Unknown Hour"}`;
    let prevPercent = subjectPercentMap[key] ?? 100;

    if (["PRESENT", "P"].includes(status)) prevPercent = Math.min(100, prevPercent + 1);
    else if (["ABSENT", "A"].includes(status)) prevPercent = Math.max(0, prevPercent - 2);
    else if (["HALF", "HALF DAY PRESENT"].includes(status)) prevPercent = Math.min(100, prevPercent + 0.5);

    subjectPercentMap[key] = prevPercent;

    if (!attendanceMap[key]) {
      attendanceMap[key] = { subject: subjectName, history: [] };
    }
    attendanceMap[key].history.push({ date: dateStr, percent: prevPercent, status });
  });

  // === Daily Display ===
  list.innerHTML = "";
  const todayStr = new Date().toISOString().split("T")[0];
Object.entries(attendanceMap).forEach(([key, data]) => {
  const todayRecord = data.history.find(h => h.date === todayStr);
  
 const todayDate = new Date();
const todayMonth = todayDate.getMonth();      // 0 = Jan
const todayYear = todayDate.getFullYear();

if (!todayRecord || (todayMonth === 6 && todayYear === 2025)) return;

    if (!todayRecord) return;
    const [subject, subjectName, hour] = key.split("|");
    const percent = todayRecord.percent;
    const colorClass = percent < 75 ? "low-attendance" : "good-attendance";
    const card = document.createElement("div");
    card.className = "attendance-card";
    card.innerHTML = `
  <strong>Subject:</strong> ${subjectName}<br/>
  <strong>Code:</strong> ${subject}<br/>
  <strong>Hour:</strong> ${hour}<br/>
  <strong>Status:</strong> ${todayRecord.status}
`;

    list.appendChild(card);
  });

  
 
   
    

  // === Monthly History with correct counting and half-day logic ===
  const historyTracker = {};
  snapshot.forEach(doc => {
    const data = doc.data();
    const status = (data.status || "").trim().toUpperCase();
    const dateObj = new Date(data.date);
    const dateStr = dateObj.toLocaleDateString("en-CA"); // same format

    const monthKey = `${dateObj.toLocaleString('default', { month: 'long' })} ${dateObj.getFullYear()}`;

    if (!historyTracker[monthKey]) historyTracker[monthKey] = {};
    if (!historyTracker[monthKey][dateStr]) historyTracker[monthKey][dateStr] = [];
    historyTracker[monthKey][dateStr].push(status);
  });


  monthContainer.innerHTML = "<h3>📅 Monthly Attendance History</h3>";
  const monthSequence = Object.entries(historyTracker).sort((a, b) => {
    const dateA = new Date(`${a[0]} 1`);
    const dateB = new Date(`${b[0]} 1`);
    return dateA - dateB;
  });

  

     let prevPercent = 100;

 let presentStreak = 0; // ✅ Move here (before monthSequence.forEach)

monthSequence.forEach(([month, days]) => {
  if (month === "July 2025") return;


  let presentDays = 0, absentDays = 0, halfDays = 0, odHours = 0, workingDays = 0;

 
   

Object.entries(days)
  .sort(([dateA], [dateB]) => new Date(dateA) - new Date(dateB))
  .forEach(([date, statuses]) => {

  const hourStatus = Array(7).fill("");
  statuses.forEach((st, idx) => {
    if (idx < 7) hourStatus[idx] = getStatusLetter(st);
  });

  const presentCount = hourStatus.filter(st => st === "P" || st === "OD").length;
  const absentCount = hourStatus.filter(st => st === "A").length;
  const holidayCount = hourStatus.filter(st => st === "H").length;
  const odCount = hourStatus.filter(st => st === "OD").length;

  odHours += odCount;

  // ❗ Skip full holidays
  if (holidayCount === 7) {
    presentStreak = 0; // reset streak if holiday
    return;
  }

  // Count as working day if not full holiday
  workingDays++;

   if (presentCount >= 6) {
  presentDays++;
  
  // +1% for every 2 fully present days
  if (presentDays % 2 === 0) {
    prevPercent = Math.min(100, prevPercent + 1);
  }

} else if (absentCount >= 6) {
  absentDays++;
  prevPercent = Math.max(0, prevPercent - 3);

} else if (presentCount >= 1 && presentCount < 6) {
  halfDays++;
  prevPercent = Math.min(100, prevPercent + 0.5);

} else {
  halfDays++;
  prevPercent = Math.min(100, prevPercent + 0.5);
}


});


  const totalDays = presentDays + absentDays + halfDays;
  const effectivePresent = presentDays + (halfDays * 0.5);
  const displayPercent = totalDays > 0 ? (effectivePresent / totalDays) * 100 : 100;
  const percentClass = prevPercent < 75 ? "low-attendance" : "good-attendance";

  // ✅ Add Total Working Days here in history section
  monthContainer.innerHTML += `
    <div style="margin-bottom: 12px; padding: 10px; background: #fff; border-radius: 8px; border-left: 4px solid #6200ea; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
      <strong>${month}</strong><br/>
      ✅ <strong>Total Present Days:</strong> ${presentDays}<br/>
      ❌ <strong>Total Absent Days:</strong> ${absentDays}<br/>
      🌓 <strong>Total Half-days:</strong> ${halfDays}<br/>
      📘 <strong>OD Applied Hours:</strong> ${odHours}<br/>
      📅 <strong>Total Working Days:</strong> ${workingDays}<br/>
      📊 <strong>Attendance Percentage:</strong> 
      <span class="${percentClass}">${prevPercent.toFixed(1)}%</span>
    </div>
  `;
});

}
// Monthly summary block using latest prevPercent from history
const monthName = now.toLocaleString('default', { month: 'long' });
const fullMonthKey = `${monthName} ${currentYear}`;

if (historyTracker[fullMonthKey]) {
  const percentClassMonth = prevPercent < 75 ? "low-attendance" : "good-attendance";

  monthlySummary.innerHTML = `
    <div style="margin-top:25px; padding:15px; background:#f3f3ff; border-left:5px solid #6200ea; border-radius:8px;">
      <h4>📅 Monthly Attendance Summary (${monthName})</h4>
      📊 <strong>Monthly Attendance Percent:</strong> 
      <span class="${percentClassMonth}">${prevPercent.toFixed(1)}%</span>
    </div>
  `;

  if (prevPercent < 75) {
    monthlySummary.innerHTML += `
      <div style="color: red; font-weight: bold; margin-top: 10px;">
        ⚠️ Alert: Your attendance this month is below 75%.
      </div>
    `;
  }
}


</script>
</body>
</html>
   
 
